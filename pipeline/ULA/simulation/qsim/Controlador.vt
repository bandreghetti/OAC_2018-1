// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/16/2018 16:44:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Controlador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Controlador_vlg_sample_tst(
	OpCode,
	sampler_tx
);
input [5:0] OpCode;
output sampler_tx;

reg sample;
time current_time;
always @(OpCode)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Controlador_vlg_check_tst (
	ALUSrc,
	Branch,
	MemToReg,
	OpALU,
	ReadMem,
	RegDST,
	RegWrite,
	WriteMem,
	sampler_rx
);
input [1:0] ALUSrc;
input [1:0] Branch;
input [1:0] MemToReg;
input [2:0] OpALU;
input  ReadMem;
input [1:0] RegDST;
input  RegWrite;
input  WriteMem;
input sampler_rx;

reg [1:0] ALUSrc_expected;
reg [1:0] Branch_expected;
reg [1:0] MemToReg_expected;
reg [2:0] OpALU_expected;
reg  ReadMem_expected;
reg [1:0] RegDST_expected;
reg  RegWrite_expected;
reg  WriteMem_expected;

reg [1:0] ALUSrc_prev;
reg [1:0] Branch_prev;
reg [1:0] MemToReg_prev;
reg [2:0] OpALU_prev;
reg  ReadMem_prev;
reg [1:0] RegDST_prev;
reg  RegWrite_prev;
reg  WriteMem_prev;

reg [1:0] ALUSrc_expected_prev;
reg [1:0] Branch_expected_prev;
reg [1:0] MemToReg_expected_prev;
reg [2:0] OpALU_expected_prev;
reg  ReadMem_expected_prev;
reg [1:0] RegDST_expected_prev;
reg  RegWrite_expected_prev;
reg  WriteMem_expected_prev;

reg [1:0] last_ALUSrc_exp;
reg [1:0] last_Branch_exp;
reg [1:0] last_MemToReg_exp;
reg [2:0] last_OpALU_exp;
reg  last_ReadMem_exp;
reg [1:0] last_RegDST_exp;
reg  last_RegWrite_exp;
reg  last_WriteMem_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUSrc_prev = ALUSrc;
	Branch_prev = Branch;
	MemToReg_prev = MemToReg;
	OpALU_prev = OpALU;
	ReadMem_prev = ReadMem;
	RegDST_prev = RegDST;
	RegWrite_prev = RegWrite;
	WriteMem_prev = WriteMem;
end

// update expected /o prevs

always @(trigger)
begin
	ALUSrc_expected_prev = ALUSrc_expected;
	Branch_expected_prev = Branch_expected;
	MemToReg_expected_prev = MemToReg_expected;
	OpALU_expected_prev = OpALU_expected;
	ReadMem_expected_prev = ReadMem_expected;
	RegDST_expected_prev = RegDST_expected;
	RegWrite_expected_prev = RegWrite_expected;
	WriteMem_expected_prev = WriteMem_expected;
end


// expected ALUSrc[ 1 ]
initial
begin
	ALUSrc_expected[1] = 1'bX;
end 
// expected ALUSrc[ 0 ]
initial
begin
	ALUSrc_expected[0] = 1'bX;
end 
// expected Branch[ 1 ]
initial
begin
	Branch_expected[1] = 1'bX;
end 
// expected Branch[ 0 ]
initial
begin
	Branch_expected[0] = 1'bX;
end 
// expected MemToReg[ 1 ]
initial
begin
	MemToReg_expected[1] = 1'bX;
end 
// expected MemToReg[ 0 ]
initial
begin
	MemToReg_expected[0] = 1'bX;
end 
// expected OpALU[ 2 ]
initial
begin
	OpALU_expected[2] = 1'bX;
end 
// expected OpALU[ 1 ]
initial
begin
	OpALU_expected[1] = 1'bX;
end 
// expected OpALU[ 0 ]
initial
begin
	OpALU_expected[0] = 1'bX;
end 

// expected ReadMem
initial
begin
	ReadMem_expected = 1'bX;
end 
// expected RegDST[ 1 ]
initial
begin
	RegDST_expected[1] = 1'bX;
end 
// expected RegDST[ 0 ]
initial
begin
	RegDST_expected[0] = 1'bX;
end 

// expected RegWrite
initial
begin
	RegWrite_expected = 1'bX;
end 

// expected WriteMem
initial
begin
	WriteMem_expected = 1'bX;
end 
// generate trigger
always @(ALUSrc_expected or ALUSrc or Branch_expected or Branch or MemToReg_expected or MemToReg or OpALU_expected or OpALU or ReadMem_expected or ReadMem or RegDST_expected or RegDST or RegWrite_expected or RegWrite or WriteMem_expected or WriteMem)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUSrc = %b | expected Branch = %b | expected MemToReg = %b | expected OpALU = %b | expected ReadMem = %b | expected RegDST = %b | expected RegWrite = %b | expected WriteMem = %b | ",ALUSrc_expected_prev,Branch_expected_prev,MemToReg_expected_prev,OpALU_expected_prev,ReadMem_expected_prev,RegDST_expected_prev,RegWrite_expected_prev,WriteMem_expected_prev);
	$display("| real ALUSrc = %b | real Branch = %b | real MemToReg = %b | real OpALU = %b | real ReadMem = %b | real RegDST = %b | real RegWrite = %b | real WriteMem = %b | ",ALUSrc_prev,Branch_prev,MemToReg_prev,OpALU_prev,ReadMem_prev,RegDST_prev,RegWrite_prev,WriteMem_prev);
`endif
	if (
		( ALUSrc_expected_prev[0] !== 1'bx ) && ( ALUSrc_prev[0] !== ALUSrc_expected_prev[0] )
		&& ((ALUSrc_expected_prev[0] !== last_ALUSrc_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_expected_prev);
		$display ("     Real value = %b", ALUSrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUSrc_exp[0] = ALUSrc_expected_prev[0];
	end
	if (
		( ALUSrc_expected_prev[1] !== 1'bx ) && ( ALUSrc_prev[1] !== ALUSrc_expected_prev[1] )
		&& ((ALUSrc_expected_prev[1] !== last_ALUSrc_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_expected_prev);
		$display ("     Real value = %b", ALUSrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUSrc_exp[1] = ALUSrc_expected_prev[1];
	end
	if (
		( Branch_expected_prev[0] !== 1'bx ) && ( Branch_prev[0] !== Branch_expected_prev[0] )
		&& ((Branch_expected_prev[0] !== last_Branch_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Branch[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Branch_expected_prev);
		$display ("     Real value = %b", Branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Branch_exp[0] = Branch_expected_prev[0];
	end
	if (
		( Branch_expected_prev[1] !== 1'bx ) && ( Branch_prev[1] !== Branch_expected_prev[1] )
		&& ((Branch_expected_prev[1] !== last_Branch_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Branch[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Branch_expected_prev);
		$display ("     Real value = %b", Branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Branch_exp[1] = Branch_expected_prev[1];
	end
	if (
		( MemToReg_expected_prev[0] !== 1'bx ) && ( MemToReg_prev[0] !== MemToReg_expected_prev[0] )
		&& ((MemToReg_expected_prev[0] !== last_MemToReg_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemToReg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemToReg_expected_prev);
		$display ("     Real value = %b", MemToReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemToReg_exp[0] = MemToReg_expected_prev[0];
	end
	if (
		( MemToReg_expected_prev[1] !== 1'bx ) && ( MemToReg_prev[1] !== MemToReg_expected_prev[1] )
		&& ((MemToReg_expected_prev[1] !== last_MemToReg_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemToReg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemToReg_expected_prev);
		$display ("     Real value = %b", MemToReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemToReg_exp[1] = MemToReg_expected_prev[1];
	end
	if (
		( OpALU_expected_prev[0] !== 1'bx ) && ( OpALU_prev[0] !== OpALU_expected_prev[0] )
		&& ((OpALU_expected_prev[0] !== last_OpALU_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpALU_expected_prev);
		$display ("     Real value = %b", OpALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OpALU_exp[0] = OpALU_expected_prev[0];
	end
	if (
		( OpALU_expected_prev[1] !== 1'bx ) && ( OpALU_prev[1] !== OpALU_expected_prev[1] )
		&& ((OpALU_expected_prev[1] !== last_OpALU_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpALU_expected_prev);
		$display ("     Real value = %b", OpALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OpALU_exp[1] = OpALU_expected_prev[1];
	end
	if (
		( OpALU_expected_prev[2] !== 1'bx ) && ( OpALU_prev[2] !== OpALU_expected_prev[2] )
		&& ((OpALU_expected_prev[2] !== last_OpALU_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpALU_expected_prev);
		$display ("     Real value = %b", OpALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OpALU_exp[2] = OpALU_expected_prev[2];
	end
	if (
		( ReadMem_expected_prev !== 1'bx ) && ( ReadMem_prev !== ReadMem_expected_prev )
		&& ((ReadMem_expected_prev !== last_ReadMem_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadMem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadMem_expected_prev);
		$display ("     Real value = %b", ReadMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ReadMem_exp = ReadMem_expected_prev;
	end
	if (
		( RegDST_expected_prev[0] !== 1'bx ) && ( RegDST_prev[0] !== RegDST_expected_prev[0] )
		&& ((RegDST_expected_prev[0] !== last_RegDST_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDST[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDST_expected_prev);
		$display ("     Real value = %b", RegDST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RegDST_exp[0] = RegDST_expected_prev[0];
	end
	if (
		( RegDST_expected_prev[1] !== 1'bx ) && ( RegDST_prev[1] !== RegDST_expected_prev[1] )
		&& ((RegDST_expected_prev[1] !== last_RegDST_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDST[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDST_expected_prev);
		$display ("     Real value = %b", RegDST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RegDST_exp[1] = RegDST_expected_prev[1];
	end
	if (
		( RegWrite_expected_prev !== 1'bx ) && ( RegWrite_prev !== RegWrite_expected_prev )
		&& ((RegWrite_expected_prev !== last_RegWrite_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegWrite_expected_prev);
		$display ("     Real value = %b", RegWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RegWrite_exp = RegWrite_expected_prev;
	end
	if (
		( WriteMem_expected_prev !== 1'bx ) && ( WriteMem_prev !== WriteMem_expected_prev )
		&& ((WriteMem_expected_prev !== last_WriteMem_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteMem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteMem_expected_prev);
		$display ("     Real value = %b", WriteMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_WriteMem_exp = WriteMem_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Controlador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] OpCode;
// wires                                               
wire [1:0] ALUSrc;
wire [1:0] Branch;
wire [1:0] MemToReg;
wire [2:0] OpALU;
wire ReadMem;
wire [1:0] RegDST;
wire RegWrite;
wire WriteMem;

wire sampler;                             

// assign statements (if any)                          
Controlador i1 (
// port map - connection between master ports and signals/registers   
	.ALUSrc(ALUSrc),
	.Branch(Branch),
	.MemToReg(MemToReg),
	.OpALU(OpALU),
	.OpCode(OpCode),
	.ReadMem(ReadMem),
	.RegDST(RegDST),
	.RegWrite(RegWrite),
	.WriteMem(WriteMem)
);
// OpCode[ 5 ]
initial
begin
	OpCode[5] = 1'b0;
	OpCode[5] = #640000 1'b1;
end 
// OpCode[ 4 ]
initial
begin
	OpCode[4] = 1'b0;
	OpCode[4] = #320000 1'b1;
	OpCode[4] = #320000 1'b0;
	OpCode[4] = #320000 1'b1;
end 
// OpCode[ 3 ]
initial
begin
	repeat(3)
	begin
		OpCode[3] = 1'b0;
		OpCode[3] = #160000 1'b1;
		# 160000;
	end
	OpCode[3] = 1'b0;
end 
// OpCode[ 2 ]
initial
begin
	repeat(6)
	begin
		OpCode[2] = 1'b0;
		OpCode[2] = #80000 1'b1;
		# 80000;
	end
	OpCode[2] = 1'b0;
end 
// OpCode[ 1 ]
initial
begin
	repeat(12)
	begin
		OpCode[1] = 1'b0;
		OpCode[1] = #40000 1'b1;
		# 40000;
	end
	OpCode[1] = 1'b0;
end 
// OpCode[ 0 ]
always
begin
	OpCode[0] = 1'b0;
	OpCode[0] = #20000 1'b1;
	#20000;
end 

Controlador_vlg_sample_tst tb_sample (
	.OpCode(OpCode),
	.sampler_tx(sampler)
);

Controlador_vlg_check_tst tb_out(
	.ALUSrc(ALUSrc),
	.Branch(Branch),
	.MemToReg(MemToReg),
	.OpALU(OpALU),
	.ReadMem(ReadMem),
	.RegDST(RegDST),
	.RegWrite(RegWrite),
	.WriteMem(WriteMem),
	.sampler_rx(sampler)
);
endmodule

