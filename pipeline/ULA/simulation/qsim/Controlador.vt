// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/17/2018 09:31:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Controlador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Controlador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] OpCode;
// wires                                               
wire [1:0] ALUSrc;
wire [1:0] Branch;
wire [1:0] MemToReg;
wire [2:0] OpALU;
wire ReadMem;
wire [1:0] RegDST;
wire RegWrite;
wire WriteMem;

// assign statements (if any)                          
Controlador i1 (
// port map - connection between master ports and signals/registers   
	.ALUSrc(ALUSrc),
	.Branch(Branch),
	.MemToReg(MemToReg),
	.OpALU(OpALU),
	.OpCode(OpCode),
	.ReadMem(ReadMem),
	.RegDST(RegDST),
	.RegWrite(RegWrite),
	.WriteMem(WriteMem)
);
initial 
begin 
#1000000 $finish;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

