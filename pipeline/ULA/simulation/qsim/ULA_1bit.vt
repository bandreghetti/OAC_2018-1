// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/14/2018 17:55:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ULA_1bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ULA_1bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A_inv;
reg B_inv;
reg C_in;
reg Less;
reg [2:0] Operacao;
// wires                                               
wire C_out;
wire Saida;
wire Set;

// assign statements (if any)                          
ULA_1bit i1 (
// port map - connection between master ports and signals/registers   
	.A_inv(A_inv),
	.B_inv(B_inv),
	.C_in(C_in),
	.C_out(C_out),
	.Less(Less),
	.Operacao(Operacao),
	.Saida(Saida),
	.Set(Set)
);
initial 
begin 
#1000000 $finish;
end 

// A_inv
initial
begin
	A_inv = 1'b0;
end 

// B_inv
initial
begin
	B_inv = 1'b0;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

