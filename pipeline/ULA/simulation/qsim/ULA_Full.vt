// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/10/2018 18:22:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ULA_Full
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ULA_Full_vlg_sample_tst(
	A,
	A_inv,
	B,
	B_inv,
	Direction,
	Op,
	Shamt,
	Shift,
	sampler_tx
);
input [31:0] A;
input  A_inv;
input [31:0] B;
input  B_inv;
input  Direction;
input [2:0] Op;
input [4:0] Shamt;
input  Shift;
output sampler_tx;

reg sample;
time current_time;
always @(A or A_inv or B or B_inv or Direction or Op or Shamt or Shift)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ULA_Full_vlg_check_tst (
	High,
	Low,
	Overflow,
	result,
	Zero,
	sampler_rx
);
input [31:0] High;
input [31:0] Low;
input  Overflow;
input [31:0] result;
input  Zero;
input sampler_rx;

reg [31:0] High_expected;
reg [31:0] Low_expected;
reg  Overflow_expected;
reg [31:0] result_expected;
reg  Zero_expected;

reg [31:0] High_prev;
reg [31:0] Low_prev;
reg  Overflow_prev;
reg [31:0] result_prev;
reg  Zero_prev;

reg [31:0] High_expected_prev;
reg [31:0] Low_expected_prev;
reg  Overflow_expected_prev;
reg [31:0] result_expected_prev;
reg  Zero_expected_prev;

reg [31:0] last_High_exp;
reg [31:0] last_Low_exp;
reg  last_Overflow_exp;
reg [31:0] last_result_exp;
reg  last_Zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	High_prev = High;
	Low_prev = Low;
	Overflow_prev = Overflow;
	result_prev = result;
	Zero_prev = Zero;
end

// update expected /o prevs

always @(trigger)
begin
	High_expected_prev = High_expected;
	Low_expected_prev = Low_expected;
	Overflow_expected_prev = Overflow_expected;
	result_expected_prev = result_expected;
	Zero_expected_prev = Zero_expected;
end


// expected High[ 31 ]
initial
begin
	High_expected[31] = 1'bX;
end 
// expected High[ 30 ]
initial
begin
	High_expected[30] = 1'bX;
end 
// expected High[ 29 ]
initial
begin
	High_expected[29] = 1'bX;
end 
// expected High[ 28 ]
initial
begin
	High_expected[28] = 1'bX;
end 
// expected High[ 27 ]
initial
begin
	High_expected[27] = 1'bX;
end 
// expected High[ 26 ]
initial
begin
	High_expected[26] = 1'bX;
end 
// expected High[ 25 ]
initial
begin
	High_expected[25] = 1'bX;
end 
// expected High[ 24 ]
initial
begin
	High_expected[24] = 1'bX;
end 
// expected High[ 23 ]
initial
begin
	High_expected[23] = 1'bX;
end 
// expected High[ 22 ]
initial
begin
	High_expected[22] = 1'bX;
end 
// expected High[ 21 ]
initial
begin
	High_expected[21] = 1'bX;
end 
// expected High[ 20 ]
initial
begin
	High_expected[20] = 1'bX;
end 
// expected High[ 19 ]
initial
begin
	High_expected[19] = 1'bX;
end 
// expected High[ 18 ]
initial
begin
	High_expected[18] = 1'bX;
end 
// expected High[ 17 ]
initial
begin
	High_expected[17] = 1'bX;
end 
// expected High[ 16 ]
initial
begin
	High_expected[16] = 1'bX;
end 
// expected High[ 15 ]
initial
begin
	High_expected[15] = 1'bX;
end 
// expected High[ 14 ]
initial
begin
	High_expected[14] = 1'bX;
end 
// expected High[ 13 ]
initial
begin
	High_expected[13] = 1'bX;
end 
// expected High[ 12 ]
initial
begin
	High_expected[12] = 1'bX;
end 
// expected High[ 11 ]
initial
begin
	High_expected[11] = 1'bX;
end 
// expected High[ 10 ]
initial
begin
	High_expected[10] = 1'bX;
end 
// expected High[ 9 ]
initial
begin
	High_expected[9] = 1'bX;
end 
// expected High[ 8 ]
initial
begin
	High_expected[8] = 1'bX;
end 
// expected High[ 7 ]
initial
begin
	High_expected[7] = 1'bX;
end 
// expected High[ 6 ]
initial
begin
	High_expected[6] = 1'bX;
end 
// expected High[ 5 ]
initial
begin
	High_expected[5] = 1'bX;
end 
// expected High[ 4 ]
initial
begin
	High_expected[4] = 1'bX;
end 
// expected High[ 3 ]
initial
begin
	High_expected[3] = 1'bX;
end 
// expected High[ 2 ]
initial
begin
	High_expected[2] = 1'bX;
end 
// expected High[ 1 ]
initial
begin
	High_expected[1] = 1'bX;
end 
// expected High[ 0 ]
initial
begin
	High_expected[0] = 1'bX;
end 
// expected Low[ 31 ]
initial
begin
	Low_expected[31] = 1'bX;
end 
// expected Low[ 30 ]
initial
begin
	Low_expected[30] = 1'bX;
end 
// expected Low[ 29 ]
initial
begin
	Low_expected[29] = 1'bX;
end 
// expected Low[ 28 ]
initial
begin
	Low_expected[28] = 1'bX;
end 
// expected Low[ 27 ]
initial
begin
	Low_expected[27] = 1'bX;
end 
// expected Low[ 26 ]
initial
begin
	Low_expected[26] = 1'bX;
end 
// expected Low[ 25 ]
initial
begin
	Low_expected[25] = 1'bX;
end 
// expected Low[ 24 ]
initial
begin
	Low_expected[24] = 1'bX;
end 
// expected Low[ 23 ]
initial
begin
	Low_expected[23] = 1'bX;
end 
// expected Low[ 22 ]
initial
begin
	Low_expected[22] = 1'bX;
end 
// expected Low[ 21 ]
initial
begin
	Low_expected[21] = 1'bX;
end 
// expected Low[ 20 ]
initial
begin
	Low_expected[20] = 1'bX;
end 
// expected Low[ 19 ]
initial
begin
	Low_expected[19] = 1'bX;
end 
// expected Low[ 18 ]
initial
begin
	Low_expected[18] = 1'bX;
end 
// expected Low[ 17 ]
initial
begin
	Low_expected[17] = 1'bX;
end 
// expected Low[ 16 ]
initial
begin
	Low_expected[16] = 1'bX;
end 
// expected Low[ 15 ]
initial
begin
	Low_expected[15] = 1'bX;
end 
// expected Low[ 14 ]
initial
begin
	Low_expected[14] = 1'bX;
end 
// expected Low[ 13 ]
initial
begin
	Low_expected[13] = 1'bX;
end 
// expected Low[ 12 ]
initial
begin
	Low_expected[12] = 1'bX;
end 
// expected Low[ 11 ]
initial
begin
	Low_expected[11] = 1'bX;
end 
// expected Low[ 10 ]
initial
begin
	Low_expected[10] = 1'bX;
end 
// expected Low[ 9 ]
initial
begin
	Low_expected[9] = 1'bX;
end 
// expected Low[ 8 ]
initial
begin
	Low_expected[8] = 1'bX;
end 
// expected Low[ 7 ]
initial
begin
	Low_expected[7] = 1'bX;
end 
// expected Low[ 6 ]
initial
begin
	Low_expected[6] = 1'bX;
end 
// expected Low[ 5 ]
initial
begin
	Low_expected[5] = 1'bX;
end 
// expected Low[ 4 ]
initial
begin
	Low_expected[4] = 1'bX;
end 
// expected Low[ 3 ]
initial
begin
	Low_expected[3] = 1'bX;
end 
// expected Low[ 2 ]
initial
begin
	Low_expected[2] = 1'bX;
end 
// expected Low[ 1 ]
initial
begin
	Low_expected[1] = 1'bX;
end 
// expected Low[ 0 ]
initial
begin
	Low_expected[0] = 1'bX;
end 

// expected Overflow
initial
begin
	Overflow_expected = 1'bX;
end 
// expected result[ 31 ]
initial
begin
	result_expected[31] = 1'bX;
end 
// expected result[ 30 ]
initial
begin
	result_expected[30] = 1'bX;
end 
// expected result[ 29 ]
initial
begin
	result_expected[29] = 1'bX;
end 
// expected result[ 28 ]
initial
begin
	result_expected[28] = 1'bX;
end 
// expected result[ 27 ]
initial
begin
	result_expected[27] = 1'bX;
end 
// expected result[ 26 ]
initial
begin
	result_expected[26] = 1'bX;
end 
// expected result[ 25 ]
initial
begin
	result_expected[25] = 1'bX;
end 
// expected result[ 24 ]
initial
begin
	result_expected[24] = 1'bX;
end 
// expected result[ 23 ]
initial
begin
	result_expected[23] = 1'bX;
end 
// expected result[ 22 ]
initial
begin
	result_expected[22] = 1'bX;
end 
// expected result[ 21 ]
initial
begin
	result_expected[21] = 1'bX;
end 
// expected result[ 20 ]
initial
begin
	result_expected[20] = 1'bX;
end 
// expected result[ 19 ]
initial
begin
	result_expected[19] = 1'bX;
end 
// expected result[ 18 ]
initial
begin
	result_expected[18] = 1'bX;
end 
// expected result[ 17 ]
initial
begin
	result_expected[17] = 1'bX;
end 
// expected result[ 16 ]
initial
begin
	result_expected[16] = 1'bX;
end 
// expected result[ 15 ]
initial
begin
	result_expected[15] = 1'bX;
end 
// expected result[ 14 ]
initial
begin
	result_expected[14] = 1'bX;
end 
// expected result[ 13 ]
initial
begin
	result_expected[13] = 1'bX;
end 
// expected result[ 12 ]
initial
begin
	result_expected[12] = 1'bX;
end 
// expected result[ 11 ]
initial
begin
	result_expected[11] = 1'bX;
end 
// expected result[ 10 ]
initial
begin
	result_expected[10] = 1'bX;
end 
// expected result[ 9 ]
initial
begin
	result_expected[9] = 1'bX;
end 
// expected result[ 8 ]
initial
begin
	result_expected[8] = 1'bX;
end 
// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 

// expected Zero
initial
begin
	Zero_expected = 1'bX;
end 
// generate trigger
always @(High_expected or High or Low_expected or Low or Overflow_expected or Overflow or result_expected or result or Zero_expected or Zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected High = %b | expected Low = %b | expected Overflow = %b | expected result = %b | expected Zero = %b | ",High_expected_prev,Low_expected_prev,Overflow_expected_prev,result_expected_prev,Zero_expected_prev);
	$display("| real High = %b | real Low = %b | real Overflow = %b | real result = %b | real Zero = %b | ",High_prev,Low_prev,Overflow_prev,result_prev,Zero_prev);
`endif
	if (
		( High_expected_prev[0] !== 1'bx ) && ( High_prev[0] !== High_expected_prev[0] )
		&& ((High_expected_prev[0] !== last_High_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[0] = High_expected_prev[0];
	end
	if (
		( High_expected_prev[1] !== 1'bx ) && ( High_prev[1] !== High_expected_prev[1] )
		&& ((High_expected_prev[1] !== last_High_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[1] = High_expected_prev[1];
	end
	if (
		( High_expected_prev[2] !== 1'bx ) && ( High_prev[2] !== High_expected_prev[2] )
		&& ((High_expected_prev[2] !== last_High_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[2] = High_expected_prev[2];
	end
	if (
		( High_expected_prev[3] !== 1'bx ) && ( High_prev[3] !== High_expected_prev[3] )
		&& ((High_expected_prev[3] !== last_High_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[3] = High_expected_prev[3];
	end
	if (
		( High_expected_prev[4] !== 1'bx ) && ( High_prev[4] !== High_expected_prev[4] )
		&& ((High_expected_prev[4] !== last_High_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[4] = High_expected_prev[4];
	end
	if (
		( High_expected_prev[5] !== 1'bx ) && ( High_prev[5] !== High_expected_prev[5] )
		&& ((High_expected_prev[5] !== last_High_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[5] = High_expected_prev[5];
	end
	if (
		( High_expected_prev[6] !== 1'bx ) && ( High_prev[6] !== High_expected_prev[6] )
		&& ((High_expected_prev[6] !== last_High_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[6] = High_expected_prev[6];
	end
	if (
		( High_expected_prev[7] !== 1'bx ) && ( High_prev[7] !== High_expected_prev[7] )
		&& ((High_expected_prev[7] !== last_High_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[7] = High_expected_prev[7];
	end
	if (
		( High_expected_prev[8] !== 1'bx ) && ( High_prev[8] !== High_expected_prev[8] )
		&& ((High_expected_prev[8] !== last_High_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[8] = High_expected_prev[8];
	end
	if (
		( High_expected_prev[9] !== 1'bx ) && ( High_prev[9] !== High_expected_prev[9] )
		&& ((High_expected_prev[9] !== last_High_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[9] = High_expected_prev[9];
	end
	if (
		( High_expected_prev[10] !== 1'bx ) && ( High_prev[10] !== High_expected_prev[10] )
		&& ((High_expected_prev[10] !== last_High_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[10] = High_expected_prev[10];
	end
	if (
		( High_expected_prev[11] !== 1'bx ) && ( High_prev[11] !== High_expected_prev[11] )
		&& ((High_expected_prev[11] !== last_High_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[11] = High_expected_prev[11];
	end
	if (
		( High_expected_prev[12] !== 1'bx ) && ( High_prev[12] !== High_expected_prev[12] )
		&& ((High_expected_prev[12] !== last_High_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[12] = High_expected_prev[12];
	end
	if (
		( High_expected_prev[13] !== 1'bx ) && ( High_prev[13] !== High_expected_prev[13] )
		&& ((High_expected_prev[13] !== last_High_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[13] = High_expected_prev[13];
	end
	if (
		( High_expected_prev[14] !== 1'bx ) && ( High_prev[14] !== High_expected_prev[14] )
		&& ((High_expected_prev[14] !== last_High_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[14] = High_expected_prev[14];
	end
	if (
		( High_expected_prev[15] !== 1'bx ) && ( High_prev[15] !== High_expected_prev[15] )
		&& ((High_expected_prev[15] !== last_High_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[15] = High_expected_prev[15];
	end
	if (
		( High_expected_prev[16] !== 1'bx ) && ( High_prev[16] !== High_expected_prev[16] )
		&& ((High_expected_prev[16] !== last_High_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[16] = High_expected_prev[16];
	end
	if (
		( High_expected_prev[17] !== 1'bx ) && ( High_prev[17] !== High_expected_prev[17] )
		&& ((High_expected_prev[17] !== last_High_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[17] = High_expected_prev[17];
	end
	if (
		( High_expected_prev[18] !== 1'bx ) && ( High_prev[18] !== High_expected_prev[18] )
		&& ((High_expected_prev[18] !== last_High_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[18] = High_expected_prev[18];
	end
	if (
		( High_expected_prev[19] !== 1'bx ) && ( High_prev[19] !== High_expected_prev[19] )
		&& ((High_expected_prev[19] !== last_High_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[19] = High_expected_prev[19];
	end
	if (
		( High_expected_prev[20] !== 1'bx ) && ( High_prev[20] !== High_expected_prev[20] )
		&& ((High_expected_prev[20] !== last_High_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[20] = High_expected_prev[20];
	end
	if (
		( High_expected_prev[21] !== 1'bx ) && ( High_prev[21] !== High_expected_prev[21] )
		&& ((High_expected_prev[21] !== last_High_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[21] = High_expected_prev[21];
	end
	if (
		( High_expected_prev[22] !== 1'bx ) && ( High_prev[22] !== High_expected_prev[22] )
		&& ((High_expected_prev[22] !== last_High_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[22] = High_expected_prev[22];
	end
	if (
		( High_expected_prev[23] !== 1'bx ) && ( High_prev[23] !== High_expected_prev[23] )
		&& ((High_expected_prev[23] !== last_High_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[23] = High_expected_prev[23];
	end
	if (
		( High_expected_prev[24] !== 1'bx ) && ( High_prev[24] !== High_expected_prev[24] )
		&& ((High_expected_prev[24] !== last_High_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[24] = High_expected_prev[24];
	end
	if (
		( High_expected_prev[25] !== 1'bx ) && ( High_prev[25] !== High_expected_prev[25] )
		&& ((High_expected_prev[25] !== last_High_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[25] = High_expected_prev[25];
	end
	if (
		( High_expected_prev[26] !== 1'bx ) && ( High_prev[26] !== High_expected_prev[26] )
		&& ((High_expected_prev[26] !== last_High_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[26] = High_expected_prev[26];
	end
	if (
		( High_expected_prev[27] !== 1'bx ) && ( High_prev[27] !== High_expected_prev[27] )
		&& ((High_expected_prev[27] !== last_High_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[27] = High_expected_prev[27];
	end
	if (
		( High_expected_prev[28] !== 1'bx ) && ( High_prev[28] !== High_expected_prev[28] )
		&& ((High_expected_prev[28] !== last_High_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[28] = High_expected_prev[28];
	end
	if (
		( High_expected_prev[29] !== 1'bx ) && ( High_prev[29] !== High_expected_prev[29] )
		&& ((High_expected_prev[29] !== last_High_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[29] = High_expected_prev[29];
	end
	if (
		( High_expected_prev[30] !== 1'bx ) && ( High_prev[30] !== High_expected_prev[30] )
		&& ((High_expected_prev[30] !== last_High_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[30] = High_expected_prev[30];
	end
	if (
		( High_expected_prev[31] !== 1'bx ) && ( High_prev[31] !== High_expected_prev[31] )
		&& ((High_expected_prev[31] !== last_High_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_High_exp[31] = High_expected_prev[31];
	end
	if (
		( Low_expected_prev[0] !== 1'bx ) && ( Low_prev[0] !== Low_expected_prev[0] )
		&& ((Low_expected_prev[0] !== last_Low_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[0] = Low_expected_prev[0];
	end
	if (
		( Low_expected_prev[1] !== 1'bx ) && ( Low_prev[1] !== Low_expected_prev[1] )
		&& ((Low_expected_prev[1] !== last_Low_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[1] = Low_expected_prev[1];
	end
	if (
		( Low_expected_prev[2] !== 1'bx ) && ( Low_prev[2] !== Low_expected_prev[2] )
		&& ((Low_expected_prev[2] !== last_Low_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[2] = Low_expected_prev[2];
	end
	if (
		( Low_expected_prev[3] !== 1'bx ) && ( Low_prev[3] !== Low_expected_prev[3] )
		&& ((Low_expected_prev[3] !== last_Low_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[3] = Low_expected_prev[3];
	end
	if (
		( Low_expected_prev[4] !== 1'bx ) && ( Low_prev[4] !== Low_expected_prev[4] )
		&& ((Low_expected_prev[4] !== last_Low_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[4] = Low_expected_prev[4];
	end
	if (
		( Low_expected_prev[5] !== 1'bx ) && ( Low_prev[5] !== Low_expected_prev[5] )
		&& ((Low_expected_prev[5] !== last_Low_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[5] = Low_expected_prev[5];
	end
	if (
		( Low_expected_prev[6] !== 1'bx ) && ( Low_prev[6] !== Low_expected_prev[6] )
		&& ((Low_expected_prev[6] !== last_Low_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[6] = Low_expected_prev[6];
	end
	if (
		( Low_expected_prev[7] !== 1'bx ) && ( Low_prev[7] !== Low_expected_prev[7] )
		&& ((Low_expected_prev[7] !== last_Low_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[7] = Low_expected_prev[7];
	end
	if (
		( Low_expected_prev[8] !== 1'bx ) && ( Low_prev[8] !== Low_expected_prev[8] )
		&& ((Low_expected_prev[8] !== last_Low_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[8] = Low_expected_prev[8];
	end
	if (
		( Low_expected_prev[9] !== 1'bx ) && ( Low_prev[9] !== Low_expected_prev[9] )
		&& ((Low_expected_prev[9] !== last_Low_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[9] = Low_expected_prev[9];
	end
	if (
		( Low_expected_prev[10] !== 1'bx ) && ( Low_prev[10] !== Low_expected_prev[10] )
		&& ((Low_expected_prev[10] !== last_Low_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[10] = Low_expected_prev[10];
	end
	if (
		( Low_expected_prev[11] !== 1'bx ) && ( Low_prev[11] !== Low_expected_prev[11] )
		&& ((Low_expected_prev[11] !== last_Low_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[11] = Low_expected_prev[11];
	end
	if (
		( Low_expected_prev[12] !== 1'bx ) && ( Low_prev[12] !== Low_expected_prev[12] )
		&& ((Low_expected_prev[12] !== last_Low_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[12] = Low_expected_prev[12];
	end
	if (
		( Low_expected_prev[13] !== 1'bx ) && ( Low_prev[13] !== Low_expected_prev[13] )
		&& ((Low_expected_prev[13] !== last_Low_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[13] = Low_expected_prev[13];
	end
	if (
		( Low_expected_prev[14] !== 1'bx ) && ( Low_prev[14] !== Low_expected_prev[14] )
		&& ((Low_expected_prev[14] !== last_Low_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[14] = Low_expected_prev[14];
	end
	if (
		( Low_expected_prev[15] !== 1'bx ) && ( Low_prev[15] !== Low_expected_prev[15] )
		&& ((Low_expected_prev[15] !== last_Low_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[15] = Low_expected_prev[15];
	end
	if (
		( Low_expected_prev[16] !== 1'bx ) && ( Low_prev[16] !== Low_expected_prev[16] )
		&& ((Low_expected_prev[16] !== last_Low_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[16] = Low_expected_prev[16];
	end
	if (
		( Low_expected_prev[17] !== 1'bx ) && ( Low_prev[17] !== Low_expected_prev[17] )
		&& ((Low_expected_prev[17] !== last_Low_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[17] = Low_expected_prev[17];
	end
	if (
		( Low_expected_prev[18] !== 1'bx ) && ( Low_prev[18] !== Low_expected_prev[18] )
		&& ((Low_expected_prev[18] !== last_Low_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[18] = Low_expected_prev[18];
	end
	if (
		( Low_expected_prev[19] !== 1'bx ) && ( Low_prev[19] !== Low_expected_prev[19] )
		&& ((Low_expected_prev[19] !== last_Low_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[19] = Low_expected_prev[19];
	end
	if (
		( Low_expected_prev[20] !== 1'bx ) && ( Low_prev[20] !== Low_expected_prev[20] )
		&& ((Low_expected_prev[20] !== last_Low_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[20] = Low_expected_prev[20];
	end
	if (
		( Low_expected_prev[21] !== 1'bx ) && ( Low_prev[21] !== Low_expected_prev[21] )
		&& ((Low_expected_prev[21] !== last_Low_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[21] = Low_expected_prev[21];
	end
	if (
		( Low_expected_prev[22] !== 1'bx ) && ( Low_prev[22] !== Low_expected_prev[22] )
		&& ((Low_expected_prev[22] !== last_Low_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[22] = Low_expected_prev[22];
	end
	if (
		( Low_expected_prev[23] !== 1'bx ) && ( Low_prev[23] !== Low_expected_prev[23] )
		&& ((Low_expected_prev[23] !== last_Low_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[23] = Low_expected_prev[23];
	end
	if (
		( Low_expected_prev[24] !== 1'bx ) && ( Low_prev[24] !== Low_expected_prev[24] )
		&& ((Low_expected_prev[24] !== last_Low_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[24] = Low_expected_prev[24];
	end
	if (
		( Low_expected_prev[25] !== 1'bx ) && ( Low_prev[25] !== Low_expected_prev[25] )
		&& ((Low_expected_prev[25] !== last_Low_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[25] = Low_expected_prev[25];
	end
	if (
		( Low_expected_prev[26] !== 1'bx ) && ( Low_prev[26] !== Low_expected_prev[26] )
		&& ((Low_expected_prev[26] !== last_Low_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[26] = Low_expected_prev[26];
	end
	if (
		( Low_expected_prev[27] !== 1'bx ) && ( Low_prev[27] !== Low_expected_prev[27] )
		&& ((Low_expected_prev[27] !== last_Low_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[27] = Low_expected_prev[27];
	end
	if (
		( Low_expected_prev[28] !== 1'bx ) && ( Low_prev[28] !== Low_expected_prev[28] )
		&& ((Low_expected_prev[28] !== last_Low_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[28] = Low_expected_prev[28];
	end
	if (
		( Low_expected_prev[29] !== 1'bx ) && ( Low_prev[29] !== Low_expected_prev[29] )
		&& ((Low_expected_prev[29] !== last_Low_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[29] = Low_expected_prev[29];
	end
	if (
		( Low_expected_prev[30] !== 1'bx ) && ( Low_prev[30] !== Low_expected_prev[30] )
		&& ((Low_expected_prev[30] !== last_Low_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[30] = Low_expected_prev[30];
	end
	if (
		( Low_expected_prev[31] !== 1'bx ) && ( Low_prev[31] !== Low_expected_prev[31] )
		&& ((Low_expected_prev[31] !== last_Low_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Low_exp[31] = Low_expected_prev[31];
	end
	if (
		( Overflow_expected_prev !== 1'bx ) && ( Overflow_prev !== Overflow_expected_prev )
		&& ((Overflow_expected_prev !== last_Overflow_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Overflow_expected_prev);
		$display ("     Real value = %b", Overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Overflow_exp = Overflow_expected_prev;
	end
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end
	if (
		( result_expected_prev[8] !== 1'bx ) && ( result_prev[8] !== result_expected_prev[8] )
		&& ((result_expected_prev[8] !== last_result_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[8] = result_expected_prev[8];
	end
	if (
		( result_expected_prev[9] !== 1'bx ) && ( result_prev[9] !== result_expected_prev[9] )
		&& ((result_expected_prev[9] !== last_result_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[9] = result_expected_prev[9];
	end
	if (
		( result_expected_prev[10] !== 1'bx ) && ( result_prev[10] !== result_expected_prev[10] )
		&& ((result_expected_prev[10] !== last_result_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[10] = result_expected_prev[10];
	end
	if (
		( result_expected_prev[11] !== 1'bx ) && ( result_prev[11] !== result_expected_prev[11] )
		&& ((result_expected_prev[11] !== last_result_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[11] = result_expected_prev[11];
	end
	if (
		( result_expected_prev[12] !== 1'bx ) && ( result_prev[12] !== result_expected_prev[12] )
		&& ((result_expected_prev[12] !== last_result_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[12] = result_expected_prev[12];
	end
	if (
		( result_expected_prev[13] !== 1'bx ) && ( result_prev[13] !== result_expected_prev[13] )
		&& ((result_expected_prev[13] !== last_result_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[13] = result_expected_prev[13];
	end
	if (
		( result_expected_prev[14] !== 1'bx ) && ( result_prev[14] !== result_expected_prev[14] )
		&& ((result_expected_prev[14] !== last_result_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[14] = result_expected_prev[14];
	end
	if (
		( result_expected_prev[15] !== 1'bx ) && ( result_prev[15] !== result_expected_prev[15] )
		&& ((result_expected_prev[15] !== last_result_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[15] = result_expected_prev[15];
	end
	if (
		( result_expected_prev[16] !== 1'bx ) && ( result_prev[16] !== result_expected_prev[16] )
		&& ((result_expected_prev[16] !== last_result_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[16] = result_expected_prev[16];
	end
	if (
		( result_expected_prev[17] !== 1'bx ) && ( result_prev[17] !== result_expected_prev[17] )
		&& ((result_expected_prev[17] !== last_result_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[17] = result_expected_prev[17];
	end
	if (
		( result_expected_prev[18] !== 1'bx ) && ( result_prev[18] !== result_expected_prev[18] )
		&& ((result_expected_prev[18] !== last_result_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[18] = result_expected_prev[18];
	end
	if (
		( result_expected_prev[19] !== 1'bx ) && ( result_prev[19] !== result_expected_prev[19] )
		&& ((result_expected_prev[19] !== last_result_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[19] = result_expected_prev[19];
	end
	if (
		( result_expected_prev[20] !== 1'bx ) && ( result_prev[20] !== result_expected_prev[20] )
		&& ((result_expected_prev[20] !== last_result_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[20] = result_expected_prev[20];
	end
	if (
		( result_expected_prev[21] !== 1'bx ) && ( result_prev[21] !== result_expected_prev[21] )
		&& ((result_expected_prev[21] !== last_result_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[21] = result_expected_prev[21];
	end
	if (
		( result_expected_prev[22] !== 1'bx ) && ( result_prev[22] !== result_expected_prev[22] )
		&& ((result_expected_prev[22] !== last_result_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[22] = result_expected_prev[22];
	end
	if (
		( result_expected_prev[23] !== 1'bx ) && ( result_prev[23] !== result_expected_prev[23] )
		&& ((result_expected_prev[23] !== last_result_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[23] = result_expected_prev[23];
	end
	if (
		( result_expected_prev[24] !== 1'bx ) && ( result_prev[24] !== result_expected_prev[24] )
		&& ((result_expected_prev[24] !== last_result_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[24] = result_expected_prev[24];
	end
	if (
		( result_expected_prev[25] !== 1'bx ) && ( result_prev[25] !== result_expected_prev[25] )
		&& ((result_expected_prev[25] !== last_result_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[25] = result_expected_prev[25];
	end
	if (
		( result_expected_prev[26] !== 1'bx ) && ( result_prev[26] !== result_expected_prev[26] )
		&& ((result_expected_prev[26] !== last_result_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[26] = result_expected_prev[26];
	end
	if (
		( result_expected_prev[27] !== 1'bx ) && ( result_prev[27] !== result_expected_prev[27] )
		&& ((result_expected_prev[27] !== last_result_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[27] = result_expected_prev[27];
	end
	if (
		( result_expected_prev[28] !== 1'bx ) && ( result_prev[28] !== result_expected_prev[28] )
		&& ((result_expected_prev[28] !== last_result_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[28] = result_expected_prev[28];
	end
	if (
		( result_expected_prev[29] !== 1'bx ) && ( result_prev[29] !== result_expected_prev[29] )
		&& ((result_expected_prev[29] !== last_result_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[29] = result_expected_prev[29];
	end
	if (
		( result_expected_prev[30] !== 1'bx ) && ( result_prev[30] !== result_expected_prev[30] )
		&& ((result_expected_prev[30] !== last_result_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[30] = result_expected_prev[30];
	end
	if (
		( result_expected_prev[31] !== 1'bx ) && ( result_prev[31] !== result_expected_prev[31] )
		&& ((result_expected_prev[31] !== last_result_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[31] = result_expected_prev[31];
	end
	if (
		( Zero_expected_prev !== 1'bx ) && ( Zero_prev !== Zero_expected_prev )
		&& ((Zero_expected_prev !== last_Zero_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Zero_expected_prev);
		$display ("     Real value = %b", Zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Zero_exp = Zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ULA_Full_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] A;
reg A_inv;
reg [31:0] B;
reg B_inv;
reg Direction;
reg [2:0] Op;
reg [4:0] Shamt;
reg Shift;
// wires                                               
wire [31:0] High;
wire [31:0] Low;
wire Overflow;
wire [31:0] result;
wire Zero;

wire sampler;                             

// assign statements (if any)                          
ULA_Full i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.A_inv(A_inv),
	.B(B),
	.B_inv(B_inv),
	.Direction(Direction),
	.High(High),
	.Low(Low),
	.Op(Op),
	.Overflow(Overflow),
	.result(result),
	.Shamt(Shamt),
	.Shift(Shift),
	.Zero(Zero)
);
// A[ 31 ]
initial
begin
	A[31] = 1'b0;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b0;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b0;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b0;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b0;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b0;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b0;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b0;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b0;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b0;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b0;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b0;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b0;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b0;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b0;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #300000 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
	A[2] = #300000 1'b0;
	A[2] = #400000 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	# 100000;
	repeat(2)
	begin
		A[1] = 1'b1;
		A[1] = #200000 1'b0;
		# 200000;
	end
	A[1] = 1'b1;
end 
// A[ 0 ]
always
begin
	A[0] = 1'b1;
	A[0] = #100000 1'b0;
	#100000;
end 

// A_inv
initial
begin
	A_inv = 1'b0;
end 
// B[ 31 ]
initial
begin
	B[31] = 1'b0;
end 
// B[ 30 ]
initial
begin
	B[30] = 1'b0;
end 
// B[ 29 ]
initial
begin
	B[29] = 1'b0;
end 
// B[ 28 ]
initial
begin
	B[28] = 1'b0;
end 
// B[ 27 ]
initial
begin
	B[27] = 1'b0;
end 
// B[ 26 ]
initial
begin
	B[26] = 1'b0;
end 
// B[ 25 ]
initial
begin
	B[25] = 1'b0;
end 
// B[ 24 ]
initial
begin
	B[24] = 1'b0;
end 
// B[ 23 ]
initial
begin
	B[23] = 1'b0;
end 
// B[ 22 ]
initial
begin
	B[22] = 1'b0;
end 
// B[ 21 ]
initial
begin
	B[21] = 1'b0;
end 
// B[ 20 ]
initial
begin
	B[20] = 1'b0;
end 
// B[ 19 ]
initial
begin
	B[19] = 1'b0;
end 
// B[ 18 ]
initial
begin
	B[18] = 1'b0;
end 
// B[ 17 ]
initial
begin
	B[17] = 1'b0;
end 
// B[ 16 ]
initial
begin
	B[16] = 1'b0;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
	B[5] = #600000 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
	B[4] = #300000 1'b1;
	B[4] = #300000 1'b0;
end 
// B[ 3 ]
initial
begin
	repeat(2)
	begin
		B[3] = 1'b0;
		B[3] = #200000 1'b1;
		# 100000;
	end
	B[3] = 1'b0;
	B[3] = #200000 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
	B[2] = #100000 1'b1;
	B[2] = #200000 1'b0;
	B[2] = #100000 1'b1;
	B[2] = #100000 1'b0;
	B[2] = #200000 1'b1;
	B[2] = #100000 1'b0;
	B[2] = #100000 1'b1;
end 
// B[ 1 ]
initial
begin
	repeat(2)
	begin
		B[1] = 1'b1;
		B[1] = #200000 1'b0;
		# 200000;
	end
	B[1] = 1'b1;
end 
// B[ 0 ]
always
begin
	B[0] = 1'b0;
	B[0] = #100000 1'b1;
	#100000;
end 

// B_inv
initial
begin
	B_inv = 1'b0;
end 

// Direction
initial
begin
	Direction = 1'b0;
end 
// Op[ 2 ]
initial
begin
	Op[2] = 1'b0;
end 
// Op[ 1 ]
initial
begin
	Op[1] = 1'b1;
end 
// Op[ 0 ]
initial
begin
	Op[0] = 1'b1;
end 
// Shamt[ 4 ]
initial
begin
	Shamt[4] = 1'b0;
end 
// Shamt[ 3 ]
initial
begin
	Shamt[3] = 1'b0;
end 
// Shamt[ 2 ]
initial
begin
	Shamt[2] = 1'b0;
end 
// Shamt[ 1 ]
initial
begin
	Shamt[1] = 1'b0;
end 
// Shamt[ 0 ]
initial
begin
	Shamt[0] = 1'b0;
end 

// Shift
initial
begin
	Shift = 1'b0;
end 

ULA_Full_vlg_sample_tst tb_sample (
	.A(A),
	.A_inv(A_inv),
	.B(B),
	.B_inv(B_inv),
	.Direction(Direction),
	.Op(Op),
	.Shamt(Shamt),
	.Shift(Shift),
	.sampler_tx(sampler)
);

ULA_Full_vlg_check_tst tb_out(
	.High(High),
	.Low(Low),
	.Overflow(Overflow),
	.result(result),
	.Zero(Zero),
	.sampler_rx(sampler)
);
endmodule

