// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/10/2018 14:42:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    reg32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module reg32_vlg_sample_tst(
	CLK,
	W_EN,
	WRITE,
	sampler_tx
);
input  CLK;
input  W_EN;
input [31:0] WRITE;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or W_EN or WRITE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module reg32_vlg_check_tst (
	READ,
	sampler_rx
);
input [31:0] READ;
input sampler_rx;

reg [31:0] READ_expected;

reg [31:0] READ_prev;

reg [31:0] READ_expected_prev;

reg [31:0] last_READ_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	READ_prev = READ;
end

// update expected /o prevs

always @(trigger)
begin
	READ_expected_prev = READ_expected;
end


// expected READ[ 31 ]
initial
begin
	READ_expected[31] = 1'bX;
end 
// expected READ[ 30 ]
initial
begin
	READ_expected[30] = 1'bX;
end 
// expected READ[ 29 ]
initial
begin
	READ_expected[29] = 1'bX;
end 
// expected READ[ 28 ]
initial
begin
	READ_expected[28] = 1'bX;
end 
// expected READ[ 27 ]
initial
begin
	READ_expected[27] = 1'bX;
end 
// expected READ[ 26 ]
initial
begin
	READ_expected[26] = 1'bX;
end 
// expected READ[ 25 ]
initial
begin
	READ_expected[25] = 1'bX;
end 
// expected READ[ 24 ]
initial
begin
	READ_expected[24] = 1'bX;
end 
// expected READ[ 23 ]
initial
begin
	READ_expected[23] = 1'bX;
end 
// expected READ[ 22 ]
initial
begin
	READ_expected[22] = 1'bX;
end 
// expected READ[ 21 ]
initial
begin
	READ_expected[21] = 1'bX;
end 
// expected READ[ 20 ]
initial
begin
	READ_expected[20] = 1'bX;
end 
// expected READ[ 19 ]
initial
begin
	READ_expected[19] = 1'bX;
end 
// expected READ[ 18 ]
initial
begin
	READ_expected[18] = 1'bX;
end 
// expected READ[ 17 ]
initial
begin
	READ_expected[17] = 1'bX;
end 
// expected READ[ 16 ]
initial
begin
	READ_expected[16] = 1'bX;
end 
// expected READ[ 15 ]
initial
begin
	READ_expected[15] = 1'bX;
end 
// expected READ[ 14 ]
initial
begin
	READ_expected[14] = 1'bX;
end 
// expected READ[ 13 ]
initial
begin
	READ_expected[13] = 1'bX;
end 
// expected READ[ 12 ]
initial
begin
	READ_expected[12] = 1'bX;
end 
// expected READ[ 11 ]
initial
begin
	READ_expected[11] = 1'bX;
end 
// expected READ[ 10 ]
initial
begin
	READ_expected[10] = 1'bX;
end 
// expected READ[ 9 ]
initial
begin
	READ_expected[9] = 1'bX;
end 
// expected READ[ 8 ]
initial
begin
	READ_expected[8] = 1'bX;
end 
// expected READ[ 7 ]
initial
begin
	READ_expected[7] = 1'bX;
end 
// expected READ[ 6 ]
initial
begin
	READ_expected[6] = 1'bX;
end 
// expected READ[ 5 ]
initial
begin
	READ_expected[5] = 1'bX;
end 
// expected READ[ 4 ]
initial
begin
	READ_expected[4] = 1'bX;
end 
// expected READ[ 3 ]
initial
begin
	READ_expected[3] = 1'bX;
end 
// expected READ[ 2 ]
initial
begin
	READ_expected[2] = 1'bX;
end 
// expected READ[ 1 ]
initial
begin
	READ_expected[1] = 1'bX;
end 
// expected READ[ 0 ]
initial
begin
	READ_expected[0] = 1'bX;
end 
// generate trigger
always @(READ_expected or READ)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected READ = %b | ",READ_expected_prev);
	$display("| real READ = %b | ",READ_prev);
`endif
	if (
		( READ_expected_prev[0] !== 1'bx ) && ( READ_prev[0] !== READ_expected_prev[0] )
		&& ((READ_expected_prev[0] !== last_READ_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[0] = READ_expected_prev[0];
	end
	if (
		( READ_expected_prev[1] !== 1'bx ) && ( READ_prev[1] !== READ_expected_prev[1] )
		&& ((READ_expected_prev[1] !== last_READ_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[1] = READ_expected_prev[1];
	end
	if (
		( READ_expected_prev[2] !== 1'bx ) && ( READ_prev[2] !== READ_expected_prev[2] )
		&& ((READ_expected_prev[2] !== last_READ_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[2] = READ_expected_prev[2];
	end
	if (
		( READ_expected_prev[3] !== 1'bx ) && ( READ_prev[3] !== READ_expected_prev[3] )
		&& ((READ_expected_prev[3] !== last_READ_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[3] = READ_expected_prev[3];
	end
	if (
		( READ_expected_prev[4] !== 1'bx ) && ( READ_prev[4] !== READ_expected_prev[4] )
		&& ((READ_expected_prev[4] !== last_READ_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[4] = READ_expected_prev[4];
	end
	if (
		( READ_expected_prev[5] !== 1'bx ) && ( READ_prev[5] !== READ_expected_prev[5] )
		&& ((READ_expected_prev[5] !== last_READ_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[5] = READ_expected_prev[5];
	end
	if (
		( READ_expected_prev[6] !== 1'bx ) && ( READ_prev[6] !== READ_expected_prev[6] )
		&& ((READ_expected_prev[6] !== last_READ_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[6] = READ_expected_prev[6];
	end
	if (
		( READ_expected_prev[7] !== 1'bx ) && ( READ_prev[7] !== READ_expected_prev[7] )
		&& ((READ_expected_prev[7] !== last_READ_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[7] = READ_expected_prev[7];
	end
	if (
		( READ_expected_prev[8] !== 1'bx ) && ( READ_prev[8] !== READ_expected_prev[8] )
		&& ((READ_expected_prev[8] !== last_READ_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[8] = READ_expected_prev[8];
	end
	if (
		( READ_expected_prev[9] !== 1'bx ) && ( READ_prev[9] !== READ_expected_prev[9] )
		&& ((READ_expected_prev[9] !== last_READ_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[9] = READ_expected_prev[9];
	end
	if (
		( READ_expected_prev[10] !== 1'bx ) && ( READ_prev[10] !== READ_expected_prev[10] )
		&& ((READ_expected_prev[10] !== last_READ_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[10] = READ_expected_prev[10];
	end
	if (
		( READ_expected_prev[11] !== 1'bx ) && ( READ_prev[11] !== READ_expected_prev[11] )
		&& ((READ_expected_prev[11] !== last_READ_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[11] = READ_expected_prev[11];
	end
	if (
		( READ_expected_prev[12] !== 1'bx ) && ( READ_prev[12] !== READ_expected_prev[12] )
		&& ((READ_expected_prev[12] !== last_READ_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[12] = READ_expected_prev[12];
	end
	if (
		( READ_expected_prev[13] !== 1'bx ) && ( READ_prev[13] !== READ_expected_prev[13] )
		&& ((READ_expected_prev[13] !== last_READ_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[13] = READ_expected_prev[13];
	end
	if (
		( READ_expected_prev[14] !== 1'bx ) && ( READ_prev[14] !== READ_expected_prev[14] )
		&& ((READ_expected_prev[14] !== last_READ_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[14] = READ_expected_prev[14];
	end
	if (
		( READ_expected_prev[15] !== 1'bx ) && ( READ_prev[15] !== READ_expected_prev[15] )
		&& ((READ_expected_prev[15] !== last_READ_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[15] = READ_expected_prev[15];
	end
	if (
		( READ_expected_prev[16] !== 1'bx ) && ( READ_prev[16] !== READ_expected_prev[16] )
		&& ((READ_expected_prev[16] !== last_READ_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[16] = READ_expected_prev[16];
	end
	if (
		( READ_expected_prev[17] !== 1'bx ) && ( READ_prev[17] !== READ_expected_prev[17] )
		&& ((READ_expected_prev[17] !== last_READ_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[17] = READ_expected_prev[17];
	end
	if (
		( READ_expected_prev[18] !== 1'bx ) && ( READ_prev[18] !== READ_expected_prev[18] )
		&& ((READ_expected_prev[18] !== last_READ_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[18] = READ_expected_prev[18];
	end
	if (
		( READ_expected_prev[19] !== 1'bx ) && ( READ_prev[19] !== READ_expected_prev[19] )
		&& ((READ_expected_prev[19] !== last_READ_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[19] = READ_expected_prev[19];
	end
	if (
		( READ_expected_prev[20] !== 1'bx ) && ( READ_prev[20] !== READ_expected_prev[20] )
		&& ((READ_expected_prev[20] !== last_READ_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[20] = READ_expected_prev[20];
	end
	if (
		( READ_expected_prev[21] !== 1'bx ) && ( READ_prev[21] !== READ_expected_prev[21] )
		&& ((READ_expected_prev[21] !== last_READ_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[21] = READ_expected_prev[21];
	end
	if (
		( READ_expected_prev[22] !== 1'bx ) && ( READ_prev[22] !== READ_expected_prev[22] )
		&& ((READ_expected_prev[22] !== last_READ_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[22] = READ_expected_prev[22];
	end
	if (
		( READ_expected_prev[23] !== 1'bx ) && ( READ_prev[23] !== READ_expected_prev[23] )
		&& ((READ_expected_prev[23] !== last_READ_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[23] = READ_expected_prev[23];
	end
	if (
		( READ_expected_prev[24] !== 1'bx ) && ( READ_prev[24] !== READ_expected_prev[24] )
		&& ((READ_expected_prev[24] !== last_READ_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[24] = READ_expected_prev[24];
	end
	if (
		( READ_expected_prev[25] !== 1'bx ) && ( READ_prev[25] !== READ_expected_prev[25] )
		&& ((READ_expected_prev[25] !== last_READ_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[25] = READ_expected_prev[25];
	end
	if (
		( READ_expected_prev[26] !== 1'bx ) && ( READ_prev[26] !== READ_expected_prev[26] )
		&& ((READ_expected_prev[26] !== last_READ_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[26] = READ_expected_prev[26];
	end
	if (
		( READ_expected_prev[27] !== 1'bx ) && ( READ_prev[27] !== READ_expected_prev[27] )
		&& ((READ_expected_prev[27] !== last_READ_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[27] = READ_expected_prev[27];
	end
	if (
		( READ_expected_prev[28] !== 1'bx ) && ( READ_prev[28] !== READ_expected_prev[28] )
		&& ((READ_expected_prev[28] !== last_READ_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[28] = READ_expected_prev[28];
	end
	if (
		( READ_expected_prev[29] !== 1'bx ) && ( READ_prev[29] !== READ_expected_prev[29] )
		&& ((READ_expected_prev[29] !== last_READ_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[29] = READ_expected_prev[29];
	end
	if (
		( READ_expected_prev[30] !== 1'bx ) && ( READ_prev[30] !== READ_expected_prev[30] )
		&& ((READ_expected_prev[30] !== last_READ_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[30] = READ_expected_prev[30];
	end
	if (
		( READ_expected_prev[31] !== 1'bx ) && ( READ_prev[31] !== READ_expected_prev[31] )
		&& ((READ_expected_prev[31] !== last_READ_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_expected_prev);
		$display ("     Real value = %b", READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_READ_exp[31] = READ_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module reg32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg W_EN;
reg [31:0] WRITE;
// wires                                               
wire [31:0] READ;

wire sampler;                             

// assign statements (if any)                          
reg32 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.READ(READ),
	.W_EN(W_EN),
	.WRITE(WRITE)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	#25000;
end 

// W_EN
initial
begin
	W_EN = 1'b0;
	W_EN = #100000 1'b1;
end 
// WRITE[ 31 ]
initial
begin
	WRITE[31] = 1'b0;
end 
// WRITE[ 30 ]
initial
begin
	WRITE[30] = 1'b0;
end 
// WRITE[ 29 ]
initial
begin
	WRITE[29] = 1'b0;
end 
// WRITE[ 28 ]
initial
begin
	WRITE[28] = 1'b0;
end 
// WRITE[ 27 ]
initial
begin
	WRITE[27] = 1'b0;
end 
// WRITE[ 26 ]
initial
begin
	WRITE[26] = 1'b0;
end 
// WRITE[ 25 ]
initial
begin
	WRITE[25] = 1'b0;
end 
// WRITE[ 24 ]
initial
begin
	WRITE[24] = 1'b0;
end 
// WRITE[ 23 ]
initial
begin
	WRITE[23] = 1'b0;
end 
// WRITE[ 22 ]
initial
begin
	WRITE[22] = 1'b0;
end 
// WRITE[ 21 ]
initial
begin
	WRITE[21] = 1'b0;
end 
// WRITE[ 20 ]
initial
begin
	WRITE[20] = 1'b0;
end 
// WRITE[ 19 ]
initial
begin
	WRITE[19] = 1'b0;
end 
// WRITE[ 18 ]
initial
begin
	WRITE[18] = 1'b0;
end 
// WRITE[ 17 ]
initial
begin
	WRITE[17] = 1'b0;
end 
// WRITE[ 16 ]
initial
begin
	WRITE[16] = 1'b0;
end 
// WRITE[ 15 ]
initial
begin
	WRITE[15] = 1'b0;
end 
// WRITE[ 14 ]
initial
begin
	WRITE[14] = 1'b0;
end 
// WRITE[ 13 ]
initial
begin
	WRITE[13] = 1'b0;
end 
// WRITE[ 12 ]
initial
begin
	WRITE[12] = 1'b0;
end 
// WRITE[ 11 ]
initial
begin
	WRITE[11] = 1'b0;
end 
// WRITE[ 10 ]
initial
begin
	WRITE[10] = 1'b0;
end 
// WRITE[ 9 ]
initial
begin
	WRITE[9] = 1'b0;
end 
// WRITE[ 8 ]
initial
begin
	WRITE[8] = 1'b0;
end 
// WRITE[ 7 ]
initial
begin
	WRITE[7] = 1'b0;
end 
// WRITE[ 6 ]
initial
begin
	WRITE[6] = 1'b0;
end 
// WRITE[ 5 ]
initial
begin
	WRITE[5] = 1'b0;
	WRITE[5] = #800000 1'b1;
end 
// WRITE[ 4 ]
initial
begin
	WRITE[4] = 1'b0;
	WRITE[4] = #400000 1'b1;
	WRITE[4] = #400000 1'b0;
end 
// WRITE[ 3 ]
initial
begin
	repeat(2)
	begin
		WRITE[3] = 1'b0;
		WRITE[3] = #200000 1'b1;
		# 200000;
	end
	WRITE[3] = 1'b0;
end 
// WRITE[ 2 ]
always
begin
	WRITE[2] = 1'b0;
	WRITE[2] = #100000 1'b1;
	#100000;
end 
// WRITE[ 1 ]
always
begin
	WRITE[1] = 1'b0;
	WRITE[1] = #50000 1'b1;
	#50000;
end 
// WRITE[ 0 ]
always
begin
	WRITE[0] = 1'b0;
	WRITE[0] = #25000 1'b1;
	#25000;
end 

reg32_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.W_EN(W_EN),
	.WRITE(WRITE),
	.sampler_tx(sampler)
);

reg32_vlg_check_tst tb_out(
	.READ(READ),
	.sampler_rx(sampler)
);
endmodule

