// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/10/2018 17:45:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RegBank
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegBank_vlg_sample_tst(
	ARegAddr,
	BRegAddr,
	CLK,
	WB_EN,
	WRITE_VAL,
	WriteAddr,
	sampler_tx
);
input [4:0] ARegAddr;
input [4:0] BRegAddr;
input  CLK;
input  WB_EN;
input [31:0] WRITE_VAL;
input [4:0] WriteAddr;
output sampler_tx;

reg sample;
time current_time;
always @(ARegAddr or BRegAddr or CLK or WB_EN or WRITE_VAL or WriteAddr)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RegBank_vlg_check_tst (
	Aout,
	Bout,
	sampler_rx
);
input [31:0] Aout;
input [31:0] Bout;
input sampler_rx;

reg [31:0] Aout_expected;
reg [31:0] Bout_expected;

reg [31:0] Aout_prev;
reg [31:0] Bout_prev;

reg [31:0] Aout_expected_prev;
reg [31:0] Bout_expected_prev;

reg [31:0] last_Aout_exp;
reg [31:0] last_Bout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Aout_prev = Aout;
	Bout_prev = Bout;
end

// update expected /o prevs

always @(trigger)
begin
	Aout_expected_prev = Aout_expected;
	Bout_expected_prev = Bout_expected;
end


// expected Aout[ 31 ]
initial
begin
	Aout_expected[31] = 1'bX;
end 
// expected Aout[ 30 ]
initial
begin
	Aout_expected[30] = 1'bX;
end 
// expected Aout[ 29 ]
initial
begin
	Aout_expected[29] = 1'bX;
end 
// expected Aout[ 28 ]
initial
begin
	Aout_expected[28] = 1'bX;
end 
// expected Aout[ 27 ]
initial
begin
	Aout_expected[27] = 1'bX;
end 
// expected Aout[ 26 ]
initial
begin
	Aout_expected[26] = 1'bX;
end 
// expected Aout[ 25 ]
initial
begin
	Aout_expected[25] = 1'bX;
end 
// expected Aout[ 24 ]
initial
begin
	Aout_expected[24] = 1'bX;
end 
// expected Aout[ 23 ]
initial
begin
	Aout_expected[23] = 1'bX;
end 
// expected Aout[ 22 ]
initial
begin
	Aout_expected[22] = 1'bX;
end 
// expected Aout[ 21 ]
initial
begin
	Aout_expected[21] = 1'bX;
end 
// expected Aout[ 20 ]
initial
begin
	Aout_expected[20] = 1'bX;
end 
// expected Aout[ 19 ]
initial
begin
	Aout_expected[19] = 1'bX;
end 
// expected Aout[ 18 ]
initial
begin
	Aout_expected[18] = 1'bX;
end 
// expected Aout[ 17 ]
initial
begin
	Aout_expected[17] = 1'bX;
end 
// expected Aout[ 16 ]
initial
begin
	Aout_expected[16] = 1'bX;
end 
// expected Aout[ 15 ]
initial
begin
	Aout_expected[15] = 1'bX;
end 
// expected Aout[ 14 ]
initial
begin
	Aout_expected[14] = 1'bX;
end 
// expected Aout[ 13 ]
initial
begin
	Aout_expected[13] = 1'bX;
end 
// expected Aout[ 12 ]
initial
begin
	Aout_expected[12] = 1'bX;
end 
// expected Aout[ 11 ]
initial
begin
	Aout_expected[11] = 1'bX;
end 
// expected Aout[ 10 ]
initial
begin
	Aout_expected[10] = 1'bX;
end 
// expected Aout[ 9 ]
initial
begin
	Aout_expected[9] = 1'bX;
end 
// expected Aout[ 8 ]
initial
begin
	Aout_expected[8] = 1'bX;
end 
// expected Aout[ 7 ]
initial
begin
	Aout_expected[7] = 1'bX;
end 
// expected Aout[ 6 ]
initial
begin
	Aout_expected[6] = 1'bX;
end 
// expected Aout[ 5 ]
initial
begin
	Aout_expected[5] = 1'bX;
end 
// expected Aout[ 4 ]
initial
begin
	Aout_expected[4] = 1'bX;
end 
// expected Aout[ 3 ]
initial
begin
	Aout_expected[3] = 1'bX;
end 
// expected Aout[ 2 ]
initial
begin
	Aout_expected[2] = 1'bX;
end 
// expected Aout[ 1 ]
initial
begin
	Aout_expected[1] = 1'bX;
end 
// expected Aout[ 0 ]
initial
begin
	Aout_expected[0] = 1'bX;
end 
// expected Bout[ 31 ]
initial
begin
	Bout_expected[31] = 1'bX;
end 
// expected Bout[ 30 ]
initial
begin
	Bout_expected[30] = 1'bX;
end 
// expected Bout[ 29 ]
initial
begin
	Bout_expected[29] = 1'bX;
end 
// expected Bout[ 28 ]
initial
begin
	Bout_expected[28] = 1'bX;
end 
// expected Bout[ 27 ]
initial
begin
	Bout_expected[27] = 1'bX;
end 
// expected Bout[ 26 ]
initial
begin
	Bout_expected[26] = 1'bX;
end 
// expected Bout[ 25 ]
initial
begin
	Bout_expected[25] = 1'bX;
end 
// expected Bout[ 24 ]
initial
begin
	Bout_expected[24] = 1'bX;
end 
// expected Bout[ 23 ]
initial
begin
	Bout_expected[23] = 1'bX;
end 
// expected Bout[ 22 ]
initial
begin
	Bout_expected[22] = 1'bX;
end 
// expected Bout[ 21 ]
initial
begin
	Bout_expected[21] = 1'bX;
end 
// expected Bout[ 20 ]
initial
begin
	Bout_expected[20] = 1'bX;
end 
// expected Bout[ 19 ]
initial
begin
	Bout_expected[19] = 1'bX;
end 
// expected Bout[ 18 ]
initial
begin
	Bout_expected[18] = 1'bX;
end 
// expected Bout[ 17 ]
initial
begin
	Bout_expected[17] = 1'bX;
end 
// expected Bout[ 16 ]
initial
begin
	Bout_expected[16] = 1'bX;
end 
// expected Bout[ 15 ]
initial
begin
	Bout_expected[15] = 1'bX;
end 
// expected Bout[ 14 ]
initial
begin
	Bout_expected[14] = 1'bX;
end 
// expected Bout[ 13 ]
initial
begin
	Bout_expected[13] = 1'bX;
end 
// expected Bout[ 12 ]
initial
begin
	Bout_expected[12] = 1'bX;
end 
// expected Bout[ 11 ]
initial
begin
	Bout_expected[11] = 1'bX;
end 
// expected Bout[ 10 ]
initial
begin
	Bout_expected[10] = 1'bX;
end 
// expected Bout[ 9 ]
initial
begin
	Bout_expected[9] = 1'bX;
end 
// expected Bout[ 8 ]
initial
begin
	Bout_expected[8] = 1'bX;
end 
// expected Bout[ 7 ]
initial
begin
	Bout_expected[7] = 1'bX;
end 
// expected Bout[ 6 ]
initial
begin
	Bout_expected[6] = 1'bX;
end 
// expected Bout[ 5 ]
initial
begin
	Bout_expected[5] = 1'bX;
end 
// expected Bout[ 4 ]
initial
begin
	Bout_expected[4] = 1'bX;
end 
// expected Bout[ 3 ]
initial
begin
	Bout_expected[3] = 1'bX;
end 
// expected Bout[ 2 ]
initial
begin
	Bout_expected[2] = 1'bX;
end 
// expected Bout[ 1 ]
initial
begin
	Bout_expected[1] = 1'bX;
end 
// expected Bout[ 0 ]
initial
begin
	Bout_expected[0] = 1'bX;
end 
// generate trigger
always @(Aout_expected or Aout or Bout_expected or Bout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Aout = %b | expected Bout = %b | ",Aout_expected_prev,Bout_expected_prev);
	$display("| real Aout = %b | real Bout = %b | ",Aout_prev,Bout_prev);
`endif
	if (
		( Aout_expected_prev[0] !== 1'bx ) && ( Aout_prev[0] !== Aout_expected_prev[0] )
		&& ((Aout_expected_prev[0] !== last_Aout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[0] = Aout_expected_prev[0];
	end
	if (
		( Aout_expected_prev[1] !== 1'bx ) && ( Aout_prev[1] !== Aout_expected_prev[1] )
		&& ((Aout_expected_prev[1] !== last_Aout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[1] = Aout_expected_prev[1];
	end
	if (
		( Aout_expected_prev[2] !== 1'bx ) && ( Aout_prev[2] !== Aout_expected_prev[2] )
		&& ((Aout_expected_prev[2] !== last_Aout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[2] = Aout_expected_prev[2];
	end
	if (
		( Aout_expected_prev[3] !== 1'bx ) && ( Aout_prev[3] !== Aout_expected_prev[3] )
		&& ((Aout_expected_prev[3] !== last_Aout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[3] = Aout_expected_prev[3];
	end
	if (
		( Aout_expected_prev[4] !== 1'bx ) && ( Aout_prev[4] !== Aout_expected_prev[4] )
		&& ((Aout_expected_prev[4] !== last_Aout_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[4] = Aout_expected_prev[4];
	end
	if (
		( Aout_expected_prev[5] !== 1'bx ) && ( Aout_prev[5] !== Aout_expected_prev[5] )
		&& ((Aout_expected_prev[5] !== last_Aout_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[5] = Aout_expected_prev[5];
	end
	if (
		( Aout_expected_prev[6] !== 1'bx ) && ( Aout_prev[6] !== Aout_expected_prev[6] )
		&& ((Aout_expected_prev[6] !== last_Aout_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[6] = Aout_expected_prev[6];
	end
	if (
		( Aout_expected_prev[7] !== 1'bx ) && ( Aout_prev[7] !== Aout_expected_prev[7] )
		&& ((Aout_expected_prev[7] !== last_Aout_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[7] = Aout_expected_prev[7];
	end
	if (
		( Aout_expected_prev[8] !== 1'bx ) && ( Aout_prev[8] !== Aout_expected_prev[8] )
		&& ((Aout_expected_prev[8] !== last_Aout_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[8] = Aout_expected_prev[8];
	end
	if (
		( Aout_expected_prev[9] !== 1'bx ) && ( Aout_prev[9] !== Aout_expected_prev[9] )
		&& ((Aout_expected_prev[9] !== last_Aout_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[9] = Aout_expected_prev[9];
	end
	if (
		( Aout_expected_prev[10] !== 1'bx ) && ( Aout_prev[10] !== Aout_expected_prev[10] )
		&& ((Aout_expected_prev[10] !== last_Aout_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[10] = Aout_expected_prev[10];
	end
	if (
		( Aout_expected_prev[11] !== 1'bx ) && ( Aout_prev[11] !== Aout_expected_prev[11] )
		&& ((Aout_expected_prev[11] !== last_Aout_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[11] = Aout_expected_prev[11];
	end
	if (
		( Aout_expected_prev[12] !== 1'bx ) && ( Aout_prev[12] !== Aout_expected_prev[12] )
		&& ((Aout_expected_prev[12] !== last_Aout_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[12] = Aout_expected_prev[12];
	end
	if (
		( Aout_expected_prev[13] !== 1'bx ) && ( Aout_prev[13] !== Aout_expected_prev[13] )
		&& ((Aout_expected_prev[13] !== last_Aout_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[13] = Aout_expected_prev[13];
	end
	if (
		( Aout_expected_prev[14] !== 1'bx ) && ( Aout_prev[14] !== Aout_expected_prev[14] )
		&& ((Aout_expected_prev[14] !== last_Aout_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[14] = Aout_expected_prev[14];
	end
	if (
		( Aout_expected_prev[15] !== 1'bx ) && ( Aout_prev[15] !== Aout_expected_prev[15] )
		&& ((Aout_expected_prev[15] !== last_Aout_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[15] = Aout_expected_prev[15];
	end
	if (
		( Aout_expected_prev[16] !== 1'bx ) && ( Aout_prev[16] !== Aout_expected_prev[16] )
		&& ((Aout_expected_prev[16] !== last_Aout_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[16] = Aout_expected_prev[16];
	end
	if (
		( Aout_expected_prev[17] !== 1'bx ) && ( Aout_prev[17] !== Aout_expected_prev[17] )
		&& ((Aout_expected_prev[17] !== last_Aout_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[17] = Aout_expected_prev[17];
	end
	if (
		( Aout_expected_prev[18] !== 1'bx ) && ( Aout_prev[18] !== Aout_expected_prev[18] )
		&& ((Aout_expected_prev[18] !== last_Aout_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[18] = Aout_expected_prev[18];
	end
	if (
		( Aout_expected_prev[19] !== 1'bx ) && ( Aout_prev[19] !== Aout_expected_prev[19] )
		&& ((Aout_expected_prev[19] !== last_Aout_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[19] = Aout_expected_prev[19];
	end
	if (
		( Aout_expected_prev[20] !== 1'bx ) && ( Aout_prev[20] !== Aout_expected_prev[20] )
		&& ((Aout_expected_prev[20] !== last_Aout_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[20] = Aout_expected_prev[20];
	end
	if (
		( Aout_expected_prev[21] !== 1'bx ) && ( Aout_prev[21] !== Aout_expected_prev[21] )
		&& ((Aout_expected_prev[21] !== last_Aout_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[21] = Aout_expected_prev[21];
	end
	if (
		( Aout_expected_prev[22] !== 1'bx ) && ( Aout_prev[22] !== Aout_expected_prev[22] )
		&& ((Aout_expected_prev[22] !== last_Aout_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[22] = Aout_expected_prev[22];
	end
	if (
		( Aout_expected_prev[23] !== 1'bx ) && ( Aout_prev[23] !== Aout_expected_prev[23] )
		&& ((Aout_expected_prev[23] !== last_Aout_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[23] = Aout_expected_prev[23];
	end
	if (
		( Aout_expected_prev[24] !== 1'bx ) && ( Aout_prev[24] !== Aout_expected_prev[24] )
		&& ((Aout_expected_prev[24] !== last_Aout_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[24] = Aout_expected_prev[24];
	end
	if (
		( Aout_expected_prev[25] !== 1'bx ) && ( Aout_prev[25] !== Aout_expected_prev[25] )
		&& ((Aout_expected_prev[25] !== last_Aout_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[25] = Aout_expected_prev[25];
	end
	if (
		( Aout_expected_prev[26] !== 1'bx ) && ( Aout_prev[26] !== Aout_expected_prev[26] )
		&& ((Aout_expected_prev[26] !== last_Aout_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[26] = Aout_expected_prev[26];
	end
	if (
		( Aout_expected_prev[27] !== 1'bx ) && ( Aout_prev[27] !== Aout_expected_prev[27] )
		&& ((Aout_expected_prev[27] !== last_Aout_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[27] = Aout_expected_prev[27];
	end
	if (
		( Aout_expected_prev[28] !== 1'bx ) && ( Aout_prev[28] !== Aout_expected_prev[28] )
		&& ((Aout_expected_prev[28] !== last_Aout_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[28] = Aout_expected_prev[28];
	end
	if (
		( Aout_expected_prev[29] !== 1'bx ) && ( Aout_prev[29] !== Aout_expected_prev[29] )
		&& ((Aout_expected_prev[29] !== last_Aout_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[29] = Aout_expected_prev[29];
	end
	if (
		( Aout_expected_prev[30] !== 1'bx ) && ( Aout_prev[30] !== Aout_expected_prev[30] )
		&& ((Aout_expected_prev[30] !== last_Aout_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[30] = Aout_expected_prev[30];
	end
	if (
		( Aout_expected_prev[31] !== 1'bx ) && ( Aout_prev[31] !== Aout_expected_prev[31] )
		&& ((Aout_expected_prev[31] !== last_Aout_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[31] = Aout_expected_prev[31];
	end
	if (
		( Bout_expected_prev[0] !== 1'bx ) && ( Bout_prev[0] !== Bout_expected_prev[0] )
		&& ((Bout_expected_prev[0] !== last_Bout_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[0] = Bout_expected_prev[0];
	end
	if (
		( Bout_expected_prev[1] !== 1'bx ) && ( Bout_prev[1] !== Bout_expected_prev[1] )
		&& ((Bout_expected_prev[1] !== last_Bout_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[1] = Bout_expected_prev[1];
	end
	if (
		( Bout_expected_prev[2] !== 1'bx ) && ( Bout_prev[2] !== Bout_expected_prev[2] )
		&& ((Bout_expected_prev[2] !== last_Bout_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[2] = Bout_expected_prev[2];
	end
	if (
		( Bout_expected_prev[3] !== 1'bx ) && ( Bout_prev[3] !== Bout_expected_prev[3] )
		&& ((Bout_expected_prev[3] !== last_Bout_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[3] = Bout_expected_prev[3];
	end
	if (
		( Bout_expected_prev[4] !== 1'bx ) && ( Bout_prev[4] !== Bout_expected_prev[4] )
		&& ((Bout_expected_prev[4] !== last_Bout_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[4] = Bout_expected_prev[4];
	end
	if (
		( Bout_expected_prev[5] !== 1'bx ) && ( Bout_prev[5] !== Bout_expected_prev[5] )
		&& ((Bout_expected_prev[5] !== last_Bout_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[5] = Bout_expected_prev[5];
	end
	if (
		( Bout_expected_prev[6] !== 1'bx ) && ( Bout_prev[6] !== Bout_expected_prev[6] )
		&& ((Bout_expected_prev[6] !== last_Bout_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[6] = Bout_expected_prev[6];
	end
	if (
		( Bout_expected_prev[7] !== 1'bx ) && ( Bout_prev[7] !== Bout_expected_prev[7] )
		&& ((Bout_expected_prev[7] !== last_Bout_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[7] = Bout_expected_prev[7];
	end
	if (
		( Bout_expected_prev[8] !== 1'bx ) && ( Bout_prev[8] !== Bout_expected_prev[8] )
		&& ((Bout_expected_prev[8] !== last_Bout_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[8] = Bout_expected_prev[8];
	end
	if (
		( Bout_expected_prev[9] !== 1'bx ) && ( Bout_prev[9] !== Bout_expected_prev[9] )
		&& ((Bout_expected_prev[9] !== last_Bout_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[9] = Bout_expected_prev[9];
	end
	if (
		( Bout_expected_prev[10] !== 1'bx ) && ( Bout_prev[10] !== Bout_expected_prev[10] )
		&& ((Bout_expected_prev[10] !== last_Bout_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[10] = Bout_expected_prev[10];
	end
	if (
		( Bout_expected_prev[11] !== 1'bx ) && ( Bout_prev[11] !== Bout_expected_prev[11] )
		&& ((Bout_expected_prev[11] !== last_Bout_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[11] = Bout_expected_prev[11];
	end
	if (
		( Bout_expected_prev[12] !== 1'bx ) && ( Bout_prev[12] !== Bout_expected_prev[12] )
		&& ((Bout_expected_prev[12] !== last_Bout_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[12] = Bout_expected_prev[12];
	end
	if (
		( Bout_expected_prev[13] !== 1'bx ) && ( Bout_prev[13] !== Bout_expected_prev[13] )
		&& ((Bout_expected_prev[13] !== last_Bout_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[13] = Bout_expected_prev[13];
	end
	if (
		( Bout_expected_prev[14] !== 1'bx ) && ( Bout_prev[14] !== Bout_expected_prev[14] )
		&& ((Bout_expected_prev[14] !== last_Bout_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[14] = Bout_expected_prev[14];
	end
	if (
		( Bout_expected_prev[15] !== 1'bx ) && ( Bout_prev[15] !== Bout_expected_prev[15] )
		&& ((Bout_expected_prev[15] !== last_Bout_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[15] = Bout_expected_prev[15];
	end
	if (
		( Bout_expected_prev[16] !== 1'bx ) && ( Bout_prev[16] !== Bout_expected_prev[16] )
		&& ((Bout_expected_prev[16] !== last_Bout_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[16] = Bout_expected_prev[16];
	end
	if (
		( Bout_expected_prev[17] !== 1'bx ) && ( Bout_prev[17] !== Bout_expected_prev[17] )
		&& ((Bout_expected_prev[17] !== last_Bout_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[17] = Bout_expected_prev[17];
	end
	if (
		( Bout_expected_prev[18] !== 1'bx ) && ( Bout_prev[18] !== Bout_expected_prev[18] )
		&& ((Bout_expected_prev[18] !== last_Bout_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[18] = Bout_expected_prev[18];
	end
	if (
		( Bout_expected_prev[19] !== 1'bx ) && ( Bout_prev[19] !== Bout_expected_prev[19] )
		&& ((Bout_expected_prev[19] !== last_Bout_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[19] = Bout_expected_prev[19];
	end
	if (
		( Bout_expected_prev[20] !== 1'bx ) && ( Bout_prev[20] !== Bout_expected_prev[20] )
		&& ((Bout_expected_prev[20] !== last_Bout_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[20] = Bout_expected_prev[20];
	end
	if (
		( Bout_expected_prev[21] !== 1'bx ) && ( Bout_prev[21] !== Bout_expected_prev[21] )
		&& ((Bout_expected_prev[21] !== last_Bout_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[21] = Bout_expected_prev[21];
	end
	if (
		( Bout_expected_prev[22] !== 1'bx ) && ( Bout_prev[22] !== Bout_expected_prev[22] )
		&& ((Bout_expected_prev[22] !== last_Bout_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[22] = Bout_expected_prev[22];
	end
	if (
		( Bout_expected_prev[23] !== 1'bx ) && ( Bout_prev[23] !== Bout_expected_prev[23] )
		&& ((Bout_expected_prev[23] !== last_Bout_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[23] = Bout_expected_prev[23];
	end
	if (
		( Bout_expected_prev[24] !== 1'bx ) && ( Bout_prev[24] !== Bout_expected_prev[24] )
		&& ((Bout_expected_prev[24] !== last_Bout_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[24] = Bout_expected_prev[24];
	end
	if (
		( Bout_expected_prev[25] !== 1'bx ) && ( Bout_prev[25] !== Bout_expected_prev[25] )
		&& ((Bout_expected_prev[25] !== last_Bout_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[25] = Bout_expected_prev[25];
	end
	if (
		( Bout_expected_prev[26] !== 1'bx ) && ( Bout_prev[26] !== Bout_expected_prev[26] )
		&& ((Bout_expected_prev[26] !== last_Bout_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[26] = Bout_expected_prev[26];
	end
	if (
		( Bout_expected_prev[27] !== 1'bx ) && ( Bout_prev[27] !== Bout_expected_prev[27] )
		&& ((Bout_expected_prev[27] !== last_Bout_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[27] = Bout_expected_prev[27];
	end
	if (
		( Bout_expected_prev[28] !== 1'bx ) && ( Bout_prev[28] !== Bout_expected_prev[28] )
		&& ((Bout_expected_prev[28] !== last_Bout_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[28] = Bout_expected_prev[28];
	end
	if (
		( Bout_expected_prev[29] !== 1'bx ) && ( Bout_prev[29] !== Bout_expected_prev[29] )
		&& ((Bout_expected_prev[29] !== last_Bout_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[29] = Bout_expected_prev[29];
	end
	if (
		( Bout_expected_prev[30] !== 1'bx ) && ( Bout_prev[30] !== Bout_expected_prev[30] )
		&& ((Bout_expected_prev[30] !== last_Bout_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[30] = Bout_expected_prev[30];
	end
	if (
		( Bout_expected_prev[31] !== 1'bx ) && ( Bout_prev[31] !== Bout_expected_prev[31] )
		&& ((Bout_expected_prev[31] !== last_Bout_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[31] = Bout_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RegBank_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] ARegAddr;
reg [4:0] BRegAddr;
reg CLK;
reg WB_EN;
reg [31:0] WRITE_VAL;
reg [4:0] WriteAddr;
// wires                                               
wire [31:0] Aout;
wire [31:0] Bout;

wire sampler;                             

// assign statements (if any)                          
RegBank i1 (
// port map - connection between master ports and signals/registers   
	.Aout(Aout),
	.ARegAddr(ARegAddr),
	.Bout(Bout),
	.BRegAddr(BRegAddr),
	.CLK(CLK),
	.WB_EN(WB_EN),
	.WRITE_VAL(WRITE_VAL),
	.WriteAddr(WriteAddr)
);
// ARegAddr[ 4 ]
initial
begin
	ARegAddr[4] = 1'b0;
end 
// ARegAddr[ 3 ]
initial
begin
	ARegAddr[3] = 1'b0;
end 
// ARegAddr[ 2 ]
initial
begin
	ARegAddr[2] = 1'b0;
end 
// ARegAddr[ 1 ]
initial
begin
	ARegAddr[1] = 1'b0;
end 
// ARegAddr[ 0 ]
initial
begin
	ARegAddr[0] = 1'b0;
end 
// BRegAddr[ 4 ]
initial
begin
	BRegAddr[4] = 1'b0;
end 
// BRegAddr[ 3 ]
initial
begin
	BRegAddr[3] = 1'b0;
end 
// BRegAddr[ 2 ]
initial
begin
	BRegAddr[2] = 1'b0;
end 
// BRegAddr[ 1 ]
initial
begin
	BRegAddr[1] = 1'b0;
end 
// BRegAddr[ 0 ]
initial
begin
	BRegAddr[0] = 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #20000 1'b1;
	#20000;
end 

// WB_EN
initial
begin
	WB_EN = 1'b0;
	WB_EN = #140000 1'b1;
	WB_EN = #40000 1'b0;
	WB_EN = #120000 1'b1;
	WB_EN = #40000 1'b0;
end 
// WRITE_VAL[ 31 ]
initial
begin
	WRITE_VAL[31] = 1'b1;
end 
// WRITE_VAL[ 30 ]
initial
begin
	WRITE_VAL[30] = 1'b1;
end 
// WRITE_VAL[ 29 ]
initial
begin
	WRITE_VAL[29] = 1'b1;
end 
// WRITE_VAL[ 28 ]
initial
begin
	WRITE_VAL[28] = 1'b1;
end 
// WRITE_VAL[ 27 ]
initial
begin
	WRITE_VAL[27] = 1'b1;
end 
// WRITE_VAL[ 26 ]
initial
begin
	WRITE_VAL[26] = 1'b1;
end 
// WRITE_VAL[ 25 ]
initial
begin
	WRITE_VAL[25] = 1'b1;
end 
// WRITE_VAL[ 24 ]
initial
begin
	WRITE_VAL[24] = 1'b1;
end 
// WRITE_VAL[ 23 ]
initial
begin
	WRITE_VAL[23] = 1'b1;
end 
// WRITE_VAL[ 22 ]
initial
begin
	WRITE_VAL[22] = 1'b1;
end 
// WRITE_VAL[ 21 ]
initial
begin
	WRITE_VAL[21] = 1'b1;
end 
// WRITE_VAL[ 20 ]
initial
begin
	WRITE_VAL[20] = 1'b1;
end 
// WRITE_VAL[ 19 ]
initial
begin
	WRITE_VAL[19] = 1'b1;
end 
// WRITE_VAL[ 18 ]
initial
begin
	WRITE_VAL[18] = 1'b1;
end 
// WRITE_VAL[ 17 ]
initial
begin
	WRITE_VAL[17] = 1'b1;
end 
// WRITE_VAL[ 16 ]
initial
begin
	WRITE_VAL[16] = 1'b1;
end 
// WRITE_VAL[ 15 ]
initial
begin
	WRITE_VAL[15] = 1'b1;
end 
// WRITE_VAL[ 14 ]
initial
begin
	WRITE_VAL[14] = 1'b1;
end 
// WRITE_VAL[ 13 ]
initial
begin
	WRITE_VAL[13] = 1'b1;
end 
// WRITE_VAL[ 12 ]
initial
begin
	WRITE_VAL[12] = 1'b1;
end 
// WRITE_VAL[ 11 ]
initial
begin
	WRITE_VAL[11] = 1'b1;
end 
// WRITE_VAL[ 10 ]
initial
begin
	WRITE_VAL[10] = 1'b1;
end 
// WRITE_VAL[ 9 ]
initial
begin
	WRITE_VAL[9] = 1'b1;
end 
// WRITE_VAL[ 8 ]
initial
begin
	WRITE_VAL[8] = 1'b1;
end 
// WRITE_VAL[ 7 ]
initial
begin
	WRITE_VAL[7] = 1'b1;
end 
// WRITE_VAL[ 6 ]
initial
begin
	WRITE_VAL[6] = 1'b1;
end 
// WRITE_VAL[ 5 ]
initial
begin
	WRITE_VAL[5] = 1'b1;
end 
// WRITE_VAL[ 4 ]
initial
begin
	WRITE_VAL[4] = 1'b1;
end 
// WRITE_VAL[ 3 ]
initial
begin
	WRITE_VAL[3] = 1'b1;
end 
// WRITE_VAL[ 2 ]
initial
begin
	WRITE_VAL[2] = 1'b1;
end 
// WRITE_VAL[ 1 ]
initial
begin
	WRITE_VAL[1] = 1'b1;
end 
// WRITE_VAL[ 0 ]
initial
begin
	WRITE_VAL[0] = 1'b1;
end 
// WriteAddr[ 4 ]
initial
begin
	WriteAddr[4] = 1'b0;
end 
// WriteAddr[ 3 ]
initial
begin
	WriteAddr[3] = 1'b0;
end 
// WriteAddr[ 2 ]
initial
begin
	WriteAddr[2] = 1'b0;
end 
// WriteAddr[ 1 ]
initial
begin
	WriteAddr[1] = 1'b0;
end 
// WriteAddr[ 0 ]
initial
begin
	WriteAddr[0] = 1'b0;
	WriteAddr[0] = #300000 1'b1;
	WriteAddr[0] = #40000 1'b0;
end 

RegBank_vlg_sample_tst tb_sample (
	.ARegAddr(ARegAddr),
	.BRegAddr(BRegAddr),
	.CLK(CLK),
	.WB_EN(WB_EN),
	.WRITE_VAL(WRITE_VAL),
	.WriteAddr(WriteAddr),
	.sampler_tx(sampler)
);

RegBank_vlg_check_tst tb_out(
	.Aout(Aout),
	.Bout(Bout),
	.sampler_rx(sampler)
);
endmodule

